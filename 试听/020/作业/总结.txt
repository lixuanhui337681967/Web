# 总结

#### 同步异步

###### 同步任务：

主线程上排队执行的任务

###### 异步任务：

不进入主线程，而进入任务队列的任务

###### JavaScript的异步机制包括以下几个步骤：

1. 所有同步任务都在主线程上执行，行成一个执行栈
2. 主线程之外，还存在一个任务队列，只要异步任务有了结果，就会在任务队列中放置一个事件
3. 一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面还有哪些事件，那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行
4. 主线程不断的重复上面的第三步

#### 预解析

###### 函数提升

```javascript
func();
function func(){
	alert("Funciton has been called");
}
```

由于JavaScript的预解析机制，上面的代码就等效于

```javascript
function func(){
	alert("Funciton has been called");
}
func()
```

###### 变量提升

提升，是声明的提升

```javascript
var a; //这里是声明
alert(a);//变量声明之后并未有初始化和赋值操作，所以这里是 undefined
a = 1
```

###### 函数同名

同名的函数，后面的会覆盖前面的

###### 变量和函数同名

当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。

###### 预解析是分作用域的

提升原则是提升到变量运行的环境(作用域)中去。

###### 函数表达式不会提升



#### 作用域

###### 全局作用域

1. 直接编写在 script 标签之中的JS代码，都是全局作用域；
2. 或者是一个单独的 JS 文件中的。
3. 全局作用域在页面打开时创建，页面关闭时销毁；
4. 在全局作用域中有一个全局对象 window 可以直接使用。
5. 所有创建的变量都会作为 window 对象的属性保存。
6. 所有创建的函数都会作为 window 对象的方法保存。

###### 局部作用域

1. 在函数内部就是局部作用域
2. 调用函数时创建函数作用域，函数执行完毕之后，函数作用域销毁；
3. 每调用一次函数就会创建一个新的函数作用域，它们之间是相互独立的。

###### 隐式全局变量

```javascript
function fn() {
    var a = b = c = 1; //b和c就是隐式全局变量（等号）
    var a = 1 ; b = 2 ; c = 3 ; //b和c就是隐式全局变量(分号)
    var a = 1 , b = 2 , c = 3 ; //b和c就不是隐式全局变量(逗号)
}
```

###### 作用域及作用域链

- 全局作用域---全局变量
- 局部作用域---局部变量---只在当前作用域下有效
- 块作用域？（js中没有）
- 只有函数才能产生局部作用域
- 作用域链的查找规则
- 先从当前的作用域中查找，如果有，就返回
-  如果没有从上一级查找，有就返回，没有继续上一级查找，直到全局
-  如果全局没有，就报错

#### 对象

###### 对象的创建方式

1. 字面量创建

   ```javascript
   var o = {
     name: 'zs',
     age: 18,
     sex: true,
     sayHi: function () {
       console.log(this.name);
     }
   };   
   ```

   

2. new Object()创建对象

   ```javascript
   var person = new Object();
     person.name = 'lisi';
     person.age = 35;
     person.job = 'actor';
     person.sayHi = function(){
     console.log('Hello,everyBody');
   }
   ```

   

3. 工厂函数创建对象

   ```javascript
   function createPerson(name, age, job) {
     var person = new Object();
     person.name = name;
     person.age = age;
     person.job = job;
     person.sayHi = function(){
       console.log('Hello,everyBody');
     }
     return person;
   }
   var p1 = createPerson('张三', 22, 'actor');
   ```

   

4. 自定义函数创建对象

```javascript
function Person(name,age,job){
  this.name = name;
  this.age = age;
  this.job = job;
  this.sayHi = function(){
    console.log('Hello,everyBody');
  }
}
var p1 = new Person('张三', 22, 'actor');
```

###### 属性和方法

1. 如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性，属性一般是名词，用来描述事物的特征
2.  如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法，方法是动词，描述事物的行为和功能

###### new关键字

主要用来在创建对象时初始化对象，即为对象成员变量赋初始值。

1. 构造函数用于创建一类对象，首字母要大写。
2. 构造函数要和new一起使用才有意义。
3. new会在内存中创建一个新的空对象
4. new会让this指向这个新的对象
5. new会返回这个新对象

###### this详解

1. 一般函数直接执行，内部this指向全局window
2. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象
3. 构造函数中的this其实是一个隐式对象，指向实例化对象

###### 对象的使用

1. 遍历对象的属性
2. 通过for..in语法可以遍历一个对象
3. 删除对象的属性

#### javaScript错误

###### try和catch

- try 和 catch 是成对出现的
- catch 块会捕捉到 try 块中的错误，并执行代码来处理它。

###### finally语句

finally 语句不论之前的 try 和 catch 中是否产生异常都会执行该代码块。

###### Throw语句

throw 语句允许我们 创建或抛出异常

如果把 throw 与 try 和 catch 一起使用，那么您能够控制程序流，并生成自定义的错误消息。
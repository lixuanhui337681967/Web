# 总结

#### JavaScript和HTML、CSS的区别

HTML - 提供网页的结构，提供网页中的内容

CSS - 用来美化网页

JavaScript - 可以用来控制网页内容，给网页增加动态的效果

#### JavaScript的组成

1. ECMAScript	核心
2. BOM               浏览器对象模型
3. DOM               文档对象模型

#### JavaScript注释

1. 单行注释

   ```javascript
   //这是一个变量
   var name = 'hm';
   ```

2. 多行注释

   ```javascript
   /*
   var age = 18;
   var name = 'zs';
   console.log(name, age);
   */
   ```

   

#### 变量的命名规则和规范

###### 	规则 - 必须遵守的，不遵守会报错

1、由字母、数字、下划线、$符号组成，不能以数字开头

2、不能是关键字和保留字，例如：for、while。

3、区分大小写

###### 	规范 - 建议遵守的，不遵守不会报错

1、变量名必须有意义

2、遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。

#### JavaScript数据类型

1. Number类型		NaN与任何值都不相等，包括他本身

2. String类型		

3. Boolean类型		true和false，区分大小写

4. Undefined和Null

   undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined

   null表示一个空，变量的值如果想为null，必须手动设置

#### 数据类型转换

1. 转换成字符串类型

   toString()

   String()   适用于undefined和null

2. 拼接字符串方式
   num + ""，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串

3. 转换成数值类型

      a. 如果字符串中只包含数字时，将其转换为十进制数值，忽略前导0

      b. 如果字符串中包含有效浮点格式，如“1.1”，将其转换为对应的浮点数字，忽略前导0

      c. 如果字符串中包含有效的十六进制格式，如“0xf”，将其转换为相同大小的十进制数值

      d. 如果字符串为空，或者是空内容，将其转换为0

      e. 如果字符串中包含除上述格式之外的字符，则将其转换为NaN

   parseInt()

   ```javascript
   // 返回12，如果第一个字符是数字会解析知道遇到第一个小数点结束
   var num1 = parseInt("12.3abc");   
   // 返回NaN，如果第一个字符不是数字或者符号就返回NaN
   var num2 = parseInt("abc123");   
   ```

   parseFloat()

   不同之处在与parseFloat会解析第一个. 遇到第二个.或者非数字结束

   

   +，-0等运算

   ```javascript
   var str = '500';
   console.log(+str);      // 取正
   console.log(-str);      // 取负
   console.log(str - 0);
   ```

   

   Boolean()

   0	' '	null	undefined	NaN会转换成false，其它都会转换成true。

#### JavaScript运算

1. 算术运算符

   ```javascript
   + - * / %   
   ```

2. 一元运算符
   前置++  先将自身的值自增1，再将自增后的值赋值给变量

   ```javascript
   var num1 = 5;
   ++ num1; 
   var num2 = 6;
   console.log(num1 + ++ num2);
   ```

   后置++  先将自身的值赋值给变量，然后再自增1

   ```javascript
   var num1 = 5;
   num1 ++;    
   var num2 = 6 
   console.log(num1 + num2 ++);
   ```

3. 逻辑运算符

   && 与 两个操作数同时为true，结果为true，否则都是false
   || 或 两个操作数有一个为true，结果为true，否则为false
   ! 非  取反

4. 关系运算符

   <  >  >=  <= == != === !==
   	==与===的区别：==只进行值得比较，===类型和值同时相等，则相等

5. 赋值运算符

   =	+=	-=	*=	/=	%=
   	num += 5;  //相当于  num = num + 5;

6. 运算符的优先级

   一元运算符  ++  --  !

   算数运算符  先*  /  %  后 +  -

   关系运算符  >  >=  <  <=  ==  !=   ===   !==

   逻辑运算符 先&&  后||

